"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = require("prop-types");

var _reactTransitionGroup = require("react-transition-group");

var _index = require("./index.styles");

// Copyright Â© VNG Realisatie 2020
// Licensed under the EUPL
//
var createRandomId = function createRandomId() {
  return "r".concat(Math.random().toString(36).slice(8));
};

var Collapsible = function Collapsible(_ref) {
  var title = _ref.title,
      ariaLabel = _ref.ariaLabel,
      children = _ref.children;

  var _useState = (0, _react.useState)(false),
      _useState2 = (0, _slicedToArray2["default"])(_useState, 2),
      isOpen = _useState2[0],
      setIsOpen = _useState2[1];

  var _useState3 = (0, _react.useState)(),
      _useState4 = (0, _slicedToArray2["default"])(_useState3, 2),
      id = _useState4[0],
      setId = _useState4[1];

  var toggle = function toggle() {
    return setIsOpen(!isOpen);
  };

  (0, _react.useEffect)(function () {
    setId(createRandomId());
  }, []);
  return /*#__PURE__*/_react["default"].createElement(_index.CollapsibleWrapper, {
    onClick: toggle,
    "data-testid": "collapsible"
  }, /*#__PURE__*/_react["default"].createElement(_index.CollapsibleButton, {
    "aria-haspopup": "true",
    "aria-expanded": isOpen,
    "aria-controls": id,
    "aria-label": ariaLabel || title
  }, /*#__PURE__*/_react["default"].createElement(_index.CollapsibleTitle, null, title), /*#__PURE__*/_react["default"].createElement(_index.CollapsibleChevron, {
    flipHorizontal: isOpen
  })), /*#__PURE__*/_react["default"].createElement(_reactTransitionGroup.CSSTransition, {
    "in": isOpen,
    timeout: 300,
    unmountOnExit: true,
    classNames: "collapsible"
  }, /*#__PURE__*/_react["default"].createElement(_index.CollapsibleBody, {
    id: id
  }, children)));
};

Collapsible.propTypes = {
  title: _propTypes.node.isRequired,
  ariaLabel: function ariaLabel(props, propName, componentName) {
    if (typeof props.title !== 'string' && !props[propName]) {
      return new Error('If Collapsible title is not a string, please provide an ariaLabel');
    }
  },
  children: _propTypes.node.isRequired
};
var _default = Collapsible;
exports["default"] = _default;