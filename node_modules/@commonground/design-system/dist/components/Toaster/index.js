"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Toast = exports.ToasterContext = exports.ToasterProvider = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = require("prop-types");

var _ToastPortal = _interopRequireDefault(require("./ToastPortal"));

var _index = require("./index.styles");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var ToasterContext = _react["default"].createContext();

exports.ToasterContext = ToasterContext;

var createRandomId = function createRandomId() {
  return Math.random().toString(36).slice(2);
};
/**
 * Use a Toast for global feedback.
 *
 * A Toast is based on the `Alert` component, which is intended for local feedback.
 *
 * Initialise the toaster by setting `ToasterProvider` high up the React tree.
 * To show a toast, either use the `showToast()` function provided by the `ToasterContext`
 * or the `<Toast />` component in your jsx.
 */


var ToasterProvider = function ToasterProvider(_ref) {
  var rootSelector = _ref.rootSelector,
      position = _ref.position,
      children = _ref.children;

  if ((0, _react.useContext)(ToasterContext) !== undefined) {
    console.warn('It looks like you are nesting ToasterProviders. Please use only one.');
  }

  var div = document.createElement('div');
  div.setAttribute('id', 'toaster-root');
  var refToasterRoot = (0, _react.useRef)(div);
  /**
   * Insert `toaster-root` into DOM above `react-root` so when focus is reset (new page),
   * the first tabbable items will be the toasts.
   * Note: focus is not managed by this component.
   */

  (0, _react.useEffect)(function () {
    var toasterDiv = refToasterRoot.current;
    var rootEl = document.querySelector(rootSelector);
    rootEl.parentElement.insertBefore(toasterDiv, rootEl);
    return function () {
      return toasterDiv.remove();
    }; // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);

  var _useState = (0, _react.useState)(new Map()),
      _useState2 = (0, _slicedToArray2["default"])(_useState, 2),
      toastMap = _useState2[0],
      setToastMap = _useState2[1];
  /**
   * Used internally to remove Toast on click or timeout
   */


  var handleRemoveToast = function handleRemoveToast(key) {
    if (toastMap["delete"](key)) {
      setToastMap(new Map(toastMap));
    }
  };
  /**
   * Immediately show a Toast
   *
   * @param   {[string]}  title    Title will be bold text
   * @param   {[node]}    body     Usually a string, but can be any valid react node
   * @param   {[string]}  variant  See `Alert` component for variants. Defaults to info
   *
   * @return  void
   */


  var showToast = function showToast(_ref2) {
    var title = _ref2.title,
        body = _ref2.body,
        variant = _ref2.variant;
    var key = createRandomId();
    var newMap = toastMap.set(key, {
      title: title,
      variant: variant,
      children: body,
      position: position
    });
    setToastMap(new Map(newMap));
  };

  return /*#__PURE__*/_react["default"].createElement(ToasterContext.Provider, {
    value: {
      showToast: showToast
    }
  }, /*#__PURE__*/_react["default"].createElement(_index.ToasterRootStyle, {
    position: position
  }), /*#__PURE__*/_react["default"].createElement(_ToastPortal["default"], {
    refToasterRoot: refToasterRoot,
    toastMap: toastMap,
    onRemoveToast: handleRemoveToast
  }), children);
};

exports.ToasterProvider = ToasterProvider;
ToasterProvider.propTypes = {
  rootSelector: _propTypes.string,
  position: (0, _propTypes.oneOf)(['topright', 'topleft']),
  children: _propTypes.node
};
ToasterProvider.defaultProps = {
  rootSelector: '#root',
  position: 'topright'
};
/**
 * Helper component to show Toast from jsx
 * Same props as params for `showToast`
 */

var Toast = function Toast(props) {
  var _useContext = (0, _react.useContext)(ToasterContext),
      showToast = _useContext.showToast;

  (0, _react.useEffect)(function () {
    showToast(_objectSpread({}, props)); // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);
  return null;
};

exports.Toast = Toast;