"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.DrawerContext = void 0;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = require("prop-types");

var _reactTransitionGroup = require("react-transition-group");

var _reactFocusOn = require("react-focus-on");

var _Header = _interopRequireDefault(require("./Header"));

var _Content = _interopRequireDefault(require("./Content"));

var _index = require("./index.styles");

var _CloseButton = _interopRequireDefault(require("./CloseButton"));

// Copyright Â© VNG Realisatie 2020
// Licensed under the EUPL
//
var ESCAPE_KEY_CODE = 27;
var DrawerContext = (0, _react.createContext)();
/**
 * Use `Drawer` to display an overlay providing more information.
 */

exports.DrawerContext = DrawerContext;

var Drawer = function Drawer(_ref) {
  var closeHandler = _ref.closeHandler,
      children = _ref.children,
      autoFocus = _ref.autoFocus,
      noMask = _ref.noMask,
      props = (0, _objectWithoutProperties2["default"])(_ref, ["closeHandler", "children", "autoFocus", "noMask"]);

  var _useState = (0, _react.useState)(false),
      _useState2 = (0, _slicedToArray2["default"])(_useState, 2),
      inProp = _useState2[0],
      setInProp = _useState2[1];

  var close = (0, _react.useCallback)(function () {
    setInProp(false);
    setTimeout(closeHandler, 150);
  }, [closeHandler]);
  (0, _react.useEffect)(function () {
    setInProp(true);
  }, []); // when `noMask` is true, we don't want the `FocusOn` functionality so we disabled it and
  // handle the escape key manually

  (0, _react.useEffect)(function () {
    if (noMask) {
      var handleDocumentkeydownHandler = function handleDocumentkeydownHandler(event) {
        if (event.keyCode === ESCAPE_KEY_CODE) {
          close();
        }
      };

      document.addEventListener('keydown', handleDocumentkeydownHandler);
      return function () {
        return document.removeEventListener('keydown', handleDocumentkeydownHandler);
      };
    }
  }, [noMask, close]);
  return /*#__PURE__*/_react["default"].createElement(_index.StyledContainer, props, !noMask ? /*#__PURE__*/_react["default"].createElement(_reactTransitionGroup.CSSTransition, {
    "in": inProp,
    timeout: 0,
    classNames: "fade-in"
  }, /*#__PURE__*/_react["default"].createElement(_index.StyledMask, null)) : null, /*#__PURE__*/_react["default"].createElement(_reactFocusOn.FocusOn, {
    enabled: !noMask,
    onClickOutside: !noMask ? close : function () {},
    onEscapeKey: close,
    autoFocus: autoFocus
  }, /*#__PURE__*/_react["default"].createElement(_reactTransitionGroup.CSSTransition, {
    "in": inProp,
    timeout: 250,
    classNames: "slide-in"
  }, /*#__PURE__*/_react["default"].createElement(_index.StyledDrawerContent, {
    "data-testid": "content"
  }, /*#__PURE__*/_react["default"].createElement(DrawerContext.Provider, {
    value: {
      close: close
    }
  }, children)))));
};

Drawer.propTypes = {
  closeHandler: _propTypes.func.isRequired,
  children: _propTypes.node.isRequired,
  autoFocus: _propTypes.bool,
  noMask: _propTypes.bool
};
Drawer.defaultProps = {
  autoFocus: false,
  noMask: false
};
Drawer.DrawerContext = DrawerContext;
Drawer.Header = _Header["default"];
Drawer.Content = _Content["default"];
Drawer.CloseButton = _CloseButton["default"];
var _default = Drawer;
exports["default"] = _default;