"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.StyledInput = void 0;

var _styledComponents = _interopRequireWildcard(require("styled-components"));

// Copyright Â© VNG Realisatie 2020
// Licensed under the EUPL
//
var StyledInput = /*#__PURE__*/_styledComponents["default"].input.withConfig({
  displayName: "indexstyles__StyledInput",
  componentId: "y29rr8-0"
})(["background-color:", ";display:block;width:100%;font-size:", ";font-family:'Source Sans Pro',sans-serif;padding:", ";color:", ";border:1px solid ", ";outline:none;line-height:", ";margin-top:", ";&:focus{padding:calc(", " - 1px);border:2px solid ", ";}&:placeholder{color:", ";}&.invalid{padding:calc(", " - 1px);border:2px solid ", ";}", " ", ""], function (p) {
  return p.theme.colorBackgroundInput;
}, function (p) {
  return p.theme.tokens.fontSizeMedium;
}, function (p) {
  return p.theme.tokens.spacing04;
}, function (p) {
  return p.theme.colorTextInputLabel;
}, function (p) {
  return p.theme.colorBorderInput;
}, function (p) {
  return p.theme.tokens.lineHeightText;
}, function (p) {
  return p.theme.tokens.spacing01;
}, function (p) {
  return p.theme.tokens.spacing04;
}, function (p) {
  return p.theme.colorBorderInputFocus;
}, function (p) {
  return p.theme.colorTextInputPlaceholder;
}, function (p) {
  return p.theme.tokens.spacing04;
}, function (p) {
  return p.theme.colorBorderInputError;
}, function (p) {
  return p.disabled ? (0, _styledComponents.css)(["background-color:", ";border-color:", ";cursor:not-allowed;color:", ";"], function (p) {
    return p.theme.colorBackgroundInputDisabled;
  }, function (p) {
    return p.theme.colorBorderInputDisabled;
  }, function (p) {
    return p.theme.colorTextInputDisabled;
  }) : null;
}, function (p) {
  var width;

  switch (p.size) {
    case 'xs':
      width = '5rem';
      break;

    case 's':
      width = '10rem';
      break;

    case 'm':
      width = '20rem';
      break;

    case 'l':
      width = '30rem';
      break;

    case 'xl':
      width = '46rem';
      break;

    default:
      console.warn("invalid size '".concat(p.size, "' provided. the supported values are xs, s, m, l and xl"));
  }

  return (0, _styledComponents.css)(["width:", ";"], width);
});

exports.StyledInput = StyledInput;