"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _spacings = _interopRequireDefault(require("./parts/spacings"));

var _palletteGray = _interopRequireDefault(require("./parts/palletteGray"));

var _breakpoints = _interopRequireDefault(require("./parts/breakpoints"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var tokens = _objectSpread(_objectSpread(_objectSpread({}, _spacings["default"]), _palletteGray["default"]), {}, {
  // Brand
  colorBrand1: '#FFBC2C',
  colorBrand2: '#E0E4EA',
  colorBrand3: '#262D30',
  colorBrand4: '#474E57',
  // Sub-colors
  colorInfo: '#0B71A1',
  colorInfoLight: '#D3F3FD',
  colorWarning: '#FFBC2C',
  colorWarningLight: '#FCF8DA',
  colorError: '#F02B41',
  colorErrorLight: '#FFDDE2',
  colorSuccess: '#39870C',
  colorSuccessLight: '#DCE8D1',
  // Generics
  colorBackground: '#FFFFFF',
  colorBackgroundAlt: _palletteGray["default"].colorPaletteGray100,
  colorFocus: '#0B71A1'
});

var theme = {
  name: 'default',
  tokens: tokens,
  breakpoints: _breakpoints["default"]
}; // Text

theme.colorText = tokens.colorPaletteGray900;
theme.colorTextInverse = tokens.colorPaletteGray50;
theme.colorTextLabel = tokens.colorPaletteGray600;
theme.colorTextDisabled = 'rgba(0, 0, 0, 0.3)';
theme.colorTextLink = '#0B71A1';
theme.colorTextLinkHover = '#005282';
theme.colorTextLinkDisabled = 'rgba(0, 0, 0, 0.2)'; // Alert

theme.colorAlertInfo = tokens.colorInfo;
theme.colorAlertInfoBackground = tokens.colorInfoLight;
theme.colorAlertWarning = tokens.colorWarning;
theme.colorAlertWarningBackground = tokens.colorWarningLight;
theme.colorAlertError = tokens.colorError;
theme.colorAlertErrorBackground = tokens.colorErrorLight;
theme.colorAlertSuccess = tokens.colorSuccess;
theme.colorAlertSuccessBackground = tokens.colorSuccessLight; // Buttons

theme.colorBackgroundButtonPrimary = tokens.colorBrand1;
theme.colorBackgroundButtonPrimaryHover = '#E5A827';
theme.colorBackgroundButtonPrimaryDisabled = 'rgba(0, 0, 0, 0.1)';
theme.colorTextButtonPrimary = theme.colorText;
theme.colorTextButtonPrimaryDisabled = theme.colorTextDisabled;
theme.colorBackgroundButtonSecondary = tokens.colorBrand2;
theme.colorBackgroundButtonSecondaryHover = '#CCCFD5';
theme.colorBackgroundButtonSecondaryDisabled = 'rgba(0, 0, 0, 0.1)';
theme.colorBackgroundButtonSecondarySelected = '#0B71A1';
theme.colorTextButtonSecondary = theme.colorText;
theme.colorTextButtonSecondaryDisabled = theme.colorTextDisabled;
theme.colorTextButtonSecondarySelected = theme.colorTextInverse;
theme.colorBackgroundButtonDanger = theme.colorAlertError;
theme.colorBackgroundButtonDangerHover = '#D7263A';
theme.colorBackgroundButtonDangerDisabled = 'rgba(0, 0, 0, 0.1)';
theme.colorTextButtonDanger = theme.colorTextInverse;
theme.colorTextButtonDangerDisabled = 'rgba(0, 0, 0, 0.3)'; // Input

theme.colorBackgroundInput = '#ffffff';
theme.colorBackgroundInputDisabled = 'rgba(0, 0, 0, 0.05)';
theme.colorBorderInput = tokens.colorPaletteGray500;
theme.colorBorderInputDisabled = 'transparent';
theme.colorBorderInputError = tokens.colorError;
theme.colorBorderInputFocus = tokens.colorFocus;
theme.colorTextInputLabel = tokens.colorPaletteGray800;
theme.colorTextInputLabelDisabled = 'rgba(0, 0, 0, 0.2)';
theme.colorTextInputPlaceholder = tokens.colorPaletteGray600;
theme.colorTextInputDisabled = theme.colorTextDisabled;
theme.colorTextInputError = tokens.colorError; // Checkbox & Radio

theme.colorBackgroundChoiceSelected = '#0B71A1';
theme.colorBackgroundChoiceDisabled = 'rgba(0, 0, 0, 0.1)';
theme.colorBorderChoice = tokens.colorPaletteGray500;
theme.colorBorderChoiceFocus = tokens.colorFocus; // Dropdown, Select, Popover

theme.colorBackgroundDropdown = theme.colorBackgroundInput;
theme.colorBackgroundDropdownHover = tokens.colorPaletteGray200;
theme.colorBackgroundDropdownActive = tokens.colorPaletteGray400;
theme.colorBackgroundDropdownSelected = tokens.colorPaletteGray300;
theme.colorBorderDropdownFocus = tokens.colorFocus; // Switch

theme.colorBackgroundSwitch = tokens.colorPaletteGray400;
theme.colorBackgroundSwitchChecked = '#0B71A1';
theme.colorBackgroundSwitchDisabled = tokens.colorPaletteGray200;
theme.colorBackgroundSwitchIndicatorDisabled = tokens.colorPaletteGray400; // Drawer

theme.colorBackgroundDrawer = tokens.colorBackground; // Table

theme.colorBorderTable = tokens.colorPaletteGray300;
theme.colorBackgroundTableHover = 'rgba(0, 0, 0, 0.05)';
theme.colorBorderTableFocus = tokens.colorFocus;
var _default = theme;
exports["default"] = _default;